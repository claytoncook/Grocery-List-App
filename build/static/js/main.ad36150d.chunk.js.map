{"version":3,"sources":["components/Item.js","components/List.js","pages/Home.js","pages/Login.js","App.js","serviceWorker.js","index.js"],"names":["Item","props","className","type","value","List","items","map","item","index","key","Home","useState","setItems","placeholder","onKeyDown","e","target","Login","history","useHistory","id","onClick","push","console","log","document","querySelector","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kWAYeA,MATf,SAAcC,GACV,OACI,wBAAIC,UAAU,QACV,2BAAOC,KAAK,aACXF,EAAMG,QCUJC,MAZf,SAAcJ,GACV,OACI,wBAAIC,UAAU,QAEND,EAAMK,MAAMC,KAAI,SAACC,EAAMC,GAAP,OACZ,kBAAC,EAAD,CAAMC,IAAKD,EAAOL,MAAOI,SCc9BG,MAlBf,WAAiB,IAAD,EACUC,mBAAS,CAAC,OAAQ,aAAc,QAAS,SADnD,mBACTN,EADS,KACFO,EADE,KAEd,OACE,yBAAKX,UAAU,QACb,6BACE,uCACA,2BAAOY,YAAY,WAAWC,UAAW,SAACC,GAC3B,UAAVA,EAAEN,KACHG,EAAS,GAAD,mBAAKP,GAAL,CAAYU,EAAEC,OAAOb,aAInC,6BACA,kBAAC,EAAD,CAAME,MAAOA,M,MCaJY,MA5Bf,WACE,IAAMC,EAAUC,cAChB,OACE,yBAAKlB,UAAU,SACb,sCACA,8BACE,6BACE,wCACA,2BAAOmB,GAAG,QAAQlB,KAAK,UAEzB,6BACE,2CACA,2BAAOkB,GAAG,WAAWlB,KAAK,cAE5B,6BACA,4BAAQmB,QAAS,WACfH,EAAQI,KAAK,WADf,WAGA,4BAAQD,QAAS,WACfE,QAAQC,IAAIC,SAASC,cAAc,eAAevB,MAChDsB,SAASC,cAAc,kBAAkBvB,SAF7C,mBAKF,sE,MCHSwB,MAjBf,WACE,OACE,yBAAK1B,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,SAChB,kBAAC,EAAD,WCJQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFZ,SAASa,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.ad36150d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Item.scss';\r\n\r\nfunction Item(props) {\r\n    return (\r\n        <li className=\"Item\">\r\n            <input type=\"checkbox\" />\r\n            {props.value}\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Item;","import React from 'react';\r\nimport './List.scss';\r\n\r\nimport Item from './Item';\r\n\r\nfunction List(props) {\r\n    return (\r\n        <ul className=\"List\">\r\n            {\r\n                props.items.map((item, index) => (\r\n                    <Item key={index} value={item} />\r\n                ))\r\n            }\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default List;","import React from 'react';\r\nimport { useState } from 'react';\r\nimport './Home.scss';\r\n\r\nimport List from '../components/List';\r\n\r\nfunction Home() {\r\n  let [items, setItems] = useState(['Milk', 'Vegatables', 'Fruit', 'Eggs']);\r\n  return (\r\n    <div className=\"Home\">\r\n      <div>\r\n        <h1>My List</h1>\r\n        <input placeholder='Add Item' onKeyDown={(e) => {\r\n          if(e.key === 'Enter') {\r\n            setItems([...items, e.target.value]);\r\n          }\r\n        }}/>\r\n      </div>\r\n      <hr />\r\n      <List items={items} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport './Login.scss';\r\n\r\nfunction Login() {\r\n  const history = useHistory();\r\n  return (\r\n    <div className=\"Login\">\r\n      <h1>PANTRY</h1>\r\n      <form>\r\n        <div>\r\n          <label>Email</label>\r\n          <input id='email' type='text' />\r\n        </div>\r\n        <div>\r\n          <label>Password</label>\r\n          <input id='password' type='password' />\r\n        </div>\r\n        <hr />\r\n        <button onClick={() => {\r\n          history.push('/home');\r\n        }}>Sign In</button>\r\n        <button onClick={() => {\r\n          console.log(document.querySelector('input#email').value,\r\n            document.querySelector('input#password').value)\r\n        }}>Create Account</button>\r\n      </form>\r\n      <span>PANTRY | Developed by @claytoncook</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from './pages/Home';\nimport Login from './pages/Login';\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Login />\n          </Route>\n          <Route exact path=\"/home\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport './index.scss';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}