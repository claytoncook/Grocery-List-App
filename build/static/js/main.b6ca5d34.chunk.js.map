{"version":3,"sources":["components/List.js","classes/Item.js","pages/Home.js","pages/Login.js","App.js","serviceWorker.js","index.js"],"names":["List","list","filters","user","className","Object","keys","filter","key","checked","unchecked","item","map","name","type","value","onChange","firebase","database","ref","uid","set","onClick","uuid","remove","deleteItem","Item","this","Home","setList","history","useHistory","useState","setItem","setFilters","push","auth","signOut","e","target","then","id","defaultChecked","htmlFor","Login","email","setEmail","password","setPassword","error","setError","useEffect","signInWithEmailAndPassword","catch","err","message","createUserWithEmailAndPassword","initializeApp","firebaseConfig","App","setUser","onAuthStateChanged","on","snapshot","val","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.b6ca5d34.chunk.js","sourcesContent":["import React from 'react';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport './List.scss';\r\n\r\nfunction List({ list, filters, user }) {\r\n    const deleteItem = key => firebase.database().ref(`${user.uuid}/${key}`).remove();\r\n\r\n    return (\r\n        <ul className=\"List\">\r\n            {\r\n                Object.keys(list).filter((key) => {\r\n                    const { checked, unchecked } = filters;\r\n                    const item = list[key];\r\n                    return ((checked && unchecked) || (checked && item.checked) || (unchecked && !item.checked));\r\n                }).map((key) => {\r\n                    const { name, checked } = list[key];\r\n                    return (\r\n                        <li key={key}>\r\n                            <input type=\"checkbox\" value={checked} checked={checked} onChange={() => {\r\n                                firebase.database().ref(`${user.uid}/${key}/checked`).set(!checked);\r\n                            }} />\r\n                            {name}\r\n                            <button onClick={() => deleteItem(key)}>Delete</button>\r\n                        </li>\r\n                    )\r\n                })\r\n            }\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default List;","export default class Item {\r\n    constructor(name, checked) {\r\n        this.name = name;\r\n        this.checked = checked || false;\r\n    }\r\n}","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport firebase from 'firebase/app';\r\nimport { useState } from 'react';\r\nimport './Home.scss';\r\n\r\nimport List from '../components/List';\r\nimport Item from '../classes/Item';\r\n\r\nfunction Home({ list, setList, user }) {\r\n  const history = useHistory();\r\n  const [item, setItem] = useState('');\r\n  const [filters, setFilters] = useState({\r\n    checked: true,\r\n    unchecked: true\r\n  });\r\n\r\n  if (!user) {\r\n    history.push('/');\r\n  }\r\n\r\n  const addItem = () => firebase\r\n    .database()\r\n    .ref(`/${user.uid}`)\r\n    .push(new Item(item))\r\n    .then(() => setItem(''));\r\n\r\n\r\n  const signOut = () => firebase\r\n    .auth()\r\n    .signOut();\r\n\r\n  return (\r\n    <div className=\"Home\">\r\n      <div>\r\n        <button onClick={signOut}>Sign Out</button>\r\n        <div>\r\n          <input value={item} onChange={e => setItem(e.target.value)} />\r\n          <button onClick={addItem}>Add Item</button>\r\n        </div>\r\n        <div>\r\n          <form>\r\n            <div>\r\n              <input id=\"all\" type=\"radio\" name=\"filters\" value={(filters.checked && filters.unchecked)} defaultChecked onChange={e => setFilters({\r\n                checked: true,\r\n                unchecked: true\r\n              })} />\r\n              <label htmlFor=\"all\">All</label>\r\n            </div>\r\n            <div>\r\n              <input id=\"checked\" type=\"radio\" name=\"filters\" value={filters.checked} onChange={e => setFilters({\r\n                checked: true,\r\n                unchecked: false\r\n              })} />\r\n              <label htmlFor=\"checked\">Checked</label>\r\n            </div>\r\n            <div>\r\n              <input id=\"unchecked\" type=\"radio\" name=\"filters\" value={filters.unchecked} onChange={e => setFilters({\r\n                checked: false,\r\n                unchecked: true\r\n              })} />\r\n              <label htmlFor=\"unchecked\">Unchecked</label>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      <List list={list} setList={setList} filters={filters} user={user} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;","import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport './Login.scss';\r\n\r\nfunction Login({ user }) {\r\n  const history = useHistory();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.push('/home');\r\n    }\r\n  }, [user]);\r\n\r\n  const signIn = () => firebase.auth().signInWithEmailAndPassword(email, password).catch(err => setError(err.message));\r\n  const createAccount = () => firebase.auth().createUserWithEmailAndPassword(email, password).catch(err => setError(err.message));\r\n  return (\r\n    <div className=\"Login\">\r\n      <h1>PANTRY</h1>\r\n      <form>\r\n        <label htmlFor=\"email\">Email</label>\r\n        <input id=\"email\" type=\"text\" value={email} onChange={e => setEmail(e.target.value)} />\r\n        <label htmlFor=\"password\">Password</label>\r\n        <input id=\"password\" type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\r\n        <hr />\r\n        <p>{error}</p>\r\n        <button onClick={signIn}>Sign In</button>\r\n        <button onClick={createAccount}>Create Account</button>\r\n      </form>\r\n      <span>PANTRY | Developed by @claytoncook</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState, useEffect } from 'react';\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from './pages/Home';\nimport Login from './pages/Login';\n\nimport firebase from 'firebase/app';\nimport 'firebase/database';\nimport firebaseConfig from './constants/firebaseConfig.json';\n\nimport './App.scss';\n\nfirebase.initializeApp(firebaseConfig);\n\nfunction App() {\n  const [user, setUser] = useState(null);\n  const [list, setList] = useState([]);\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged((user) => {\n      setUser(user);\n    })\n  }, []);\n\n  useEffect(() => {\n    if(user) {\n      firebase.database().ref(user.uid).on('value', (snapshot) => {\n        const value = snapshot.val();\n        setList(value || {});\n      })\n    }\n  }, [user]);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Login user={user} />\n          </Route>\n          <Route exact path=\"/home\">\n            <Home list={list} setList={setList} user={user} />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport './index.scss';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}